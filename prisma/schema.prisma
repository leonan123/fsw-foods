generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String     @id @default(uuid())
  name                String
  imageUrl            String     @map("image_url")
  deliveryFee         Decimal    @map("delivery_fee") @db.Decimal(10, 2)
  deliveryTimeMinutes Int        @map("delivery_time_minutes")
  categories          Category[]

  products          Product[]
  Order             Order[]
  usersWhoFavorited UserFavoriteRestaurant[]
}

model UserFavoriteRestaurant {
  userId       String   @map("user_id")
  restaurantId String   @map("restaurant_id")
  createdAt    DateTime @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([userId, restaurantId])
}

model Category {
  id       String @id @default(uuid())
  name     String
  imageUrl String @map("image_url")

  restaurants Restaurant[]
  products    Product[]
  createdAt   DateTime     @default(now()) @map("created_at")
}

model Product {
  id                 String  @id @default(uuid())
  name               String
  description        String
  imageUrl           String  @map("image_url")
  price              Decimal @db.Decimal(10, 2)
  discountPercentage Int     @default(0) @map("discount_percentage")

  restaurantId String     @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  categoryId    String         @map("category_id")
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now()) @map("created_at")
  orderProducts OrderProduct[]
}

model OrderProduct {
  id       String @id @default(uuid())
  quantity Int

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @map("order_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  CANCELED
  DELIVERING
  FINISHED
}

model Order {
  id                  String      @id @default(uuid())
  status              OrderStatus
  deliveryFee         Decimal     @map("delivery_fee") @db.Decimal(10, 2)
  deliveryTimeMinutes Int         @map("delivery_time_minutes")
  subtotalPrice       Decimal     @map("subtotal_price") @db.Decimal(10, 2)
  totalPrice          Decimal     @map("total_price") @db.Decimal(10, 2)
  totalDiscounts      Decimal     @map("total_discounts") @db.Decimal(10, 2)
  createdAt           DateTime    @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @map("restaurant_id")

  products OrderProduct[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String?                  @unique
  emailVerified       DateTime?                @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  order               Order[]
  favoriteRestaurants UserFavoriteRestaurant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
